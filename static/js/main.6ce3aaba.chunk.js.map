{"version":3,"sources":["days.js","features/weather/weatherSlice.js","features/weather/DayOverview.js","features/weather/WeatherOverview.js","features/weather/DayDetails.js","App.js","app/store.js","serviceWorker.js","index.js","features/weather/DayOverview.module.css","features/weather/DayDetails.module.css"],"names":["weekDays","today","Date","getDay","dayNames","range","map","i","dayName","length","weatherEmojiMap","Clear","Clouds","Rain","Drizzle","Snow","Thunderstorm","Mist","Smoke","Haze","Dust","Fog","Sand","Ash","Squall","Tornado","weatherSlice","createSlice","name","initialState","daysOverview","Array","daysTemperatures","repeat","reducers","setOverviewWeather","state","payload","dayIndex","value","setDayTemperatures","actions","selectDayOverviewWeather","weather","DayOverview","children","currentDayIndex","classNames","styles","selected","weatherOverview","useSelector","to","className","max","min","Math","round","WeatherOverview","data","dispatch","useDispatch","useEffect","a","fetch","process","response","ok","json","raw","temperatures","list","weekDay","dt","temp","main","date","hour","getHours","day","mathMod","temperature","temperaturesByDay","filter","dayTemperatures","prop","reduce","pipe","countBy","identity","toPairs","best","cur","nth","forEach","key","x","d","y","DayDetails","width","height","selectDayTemperatures","margin","xMax","yMax","xScale","scaleBand","domain","paddingOuter","paddingInner","yScale","scaleLinear","nice","xPoint","yPoint","dots","Circle","cx","cy","r","fill","Group","top","left","GridColumns","scale","stroke","GridRows","LinePath","strokeWidth","shapeRendering","AxisLeft","tickFormat","v","toString","AxisBottom","App","parsed","parseInt","isNaN","NaN","dayToIndex","match","params","store","configureStore","reducer","weatherReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"2VAEMA,EAAW,CACf,UACA,QACA,SACA,eACA,SACA,UACA,aAGIC,GAAS,IAAIC,MAAQC,SAEdC,EACXC,YAAM,EAAG,GACRC,KAAI,SAACC,GACJ,IACMC,EAAUR,GADDC,EAAQM,GAAKP,EAASS,QAErC,OAAa,IAANF,EACHC,EAAU,SACVA,KChBFE,EAAkB,CACtBC,MAAO,eACPC,OAAQ,eACRC,KAAM,eACNC,QAAS,eACTC,KAAM,eACNC,aAAc,eACdC,KAAM,eACNC,MAAO,eACPC,KAAM,eACNC,KAAM,eACNC,IAAK,eACLC,KAAM,eACNC,IAAK,eACLC,OAAQ,eACRC,QAAS,gBAGEC,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,aAAcC,MAAM3B,EAASK,QAC7BuB,iBAAkBC,YAAO,GAAI7B,EAASK,SAExCyB,SAAU,CACRC,mBAAoB,SAACC,EAAD,GAA8C,IAAD,IAAnCC,QAAWC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,MAC7CD,GAAY,GAAKA,EAAWF,EAAMN,aAAarB,SACjD2B,EAAMN,aAAaQ,GAAYC,IAGnCC,mBAAoB,SAACJ,EAAD,GAA8C,IAAD,IAAnCC,QAAWC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,MAC7CD,GAAY,GAAKA,EAAWF,EAAMJ,iBAAiBvB,SACrD2B,EAAMJ,iBAAiBM,GAAYC,O,EAMeb,EAAae,QAAxDN,E,EAAAA,mBAAoBK,E,EAAAA,mBAyDtBE,EAA2B,SAACJ,GAAD,OAAc,SAACF,GAAD,OAAWA,EAAMO,QAAQb,aAAaQ,KAI7EZ,IAAf,Q,iBClGO,SAASkB,EAAT,GAA+D,IAAxCC,EAAuC,EAAvCA,SAAUP,EAA6B,EAA7BA,SAAUQ,EAAmB,EAAnBA,gBAC1CC,EAAaC,IAAOJ,YAAc,KAAON,IAAaQ,EAAkBE,IAAOC,SAAW,IAE1FC,EAAkBC,YAAYT,EAAyBJ,IAE7D,IAAKY,EACH,OACE,kBAAC,IAAD,CAAME,GAAE,WAAQd,GAAce,UAAYN,GACpCF,EADN,iBAP+D,IAa3DS,EAAsBJ,EAAtBI,IAAKC,EAAiBL,EAAjBK,IAAKZ,EAAYO,EAAZP,QAClB,OACE,kBAAC,IAAD,CAAMS,GAAE,WAAQd,GAAce,UAAYN,GACpCF,EADN,IACmBF,EAAS,6BACtBa,KAAKC,MAAMF,GAFjB,UAE6BC,KAAKC,MAAMH,GAFxC,QCdG,SAASI,EAAT,GAA+C,IAApBZ,EAAmB,EAAnBA,gBAC1Ba,EAAOR,YAAYT,EAAyB,IAE5CkB,EAAWC,cAOjB,OANAC,qBAAU,WACHH,GACHC,EFgCiC,uCAAM,WAAOA,GAAP,qBAAAG,EAAA,sEACpBC,MAAM,4FAAD,OAA8FC,qCAD/E,YACrCC,EADqC,QAG9BC,GAH8B,iCAIvBD,EAASE,OAJc,OAInCC,EAJmC,OAMnCC,EACJD,EAAIE,KACHjE,KAAI,YAAkD,IDtB9BkE,ECsBjBC,EAA8C,EAA9CA,GAAYC,EAAkC,EAA1CC,KAAQD,KAAoBC,EAAc,cAA1BhC,QAA0B,MAAdgC,KAChCC,EAAO,IAAI1E,KAAU,IAALuE,GACtB,MAAO,CACLI,KAAMD,EAAKE,WACXC,KD1BqBP,EC0BDI,EAAKzE,SD1BQ6E,YAAQR,EAAUvE,EAAOD,EAASS,SC2BnEwE,YAAaP,EACb/B,QAASjC,EAAgBiE,QAIzBO,EACJ7E,YAAM,EAAGD,EAASK,QACjBH,KAAI,SAAAgC,GAAQ,OAAIgC,EAAaa,QAAO,qBAAGJ,MAAkBzC,SAGxChC,KAAI,SAACyE,GACrB,IAAMK,EAAkBL,EAAIzE,IAAI+E,YAAK,gBAYrC,MAAO,CACL/B,IAZW8B,EAAgBE,OAAOhC,KAalCC,IAZW6B,EAAgBE,OAAO/B,KAalCZ,QAXA4C,YACEjF,YAAI+E,YAAK,YACTG,YAAQC,KACRC,IACAJ,aAAO,SAACK,EAAMC,GAAP,OAAeA,EAAI,GAAKD,EAAK,GAAKC,EAAMD,IAAM,CAAC,GAAI,IAC1DE,YAAI,GALNN,CAMER,OASKe,SAAQ,SAACvD,EAAOD,GAC3BsB,EAASzB,EAAmB,CAAEG,WAAUC,cAG1C2C,EAAkBY,SAAQ,SAACxB,EAAchC,GACvCsB,EAASpB,EAAmB,CAAEF,WAAUC,MAAO+B,QAhDR,4CAAN,0DE3BnC,yBAAKjB,UAAU,QACXjD,EAASE,KAAI,SAACE,EAAS8B,GAAV,OACb,kBAACM,EAAD,CAAamD,IAAMzD,EAAWA,SAAWA,EAAWQ,gBAAkBA,GACpEtC,O,qGCRJwF,EAAI,SAACC,GAAD,OAAOA,EAAEpB,MACbqB,GAAI,SAACD,GAAD,OAAOA,EAAEhB,aAGZ,SAASkB,GAAT,GAAkD,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQ/D,EAAY,EAAZA,SACpCqB,EAAOR,YHoFsB,SAACb,GAAD,OAAc,SAACF,GAAD,OAAWA,EAAMO,QAAQX,iBAAiBM,IGpFlEgE,CAAsBhE,IAEzCsB,EAAWC,cAOjB,GANAC,qBAAU,WACHH,GAAwB,IAAhBA,EAAKlD,QAChBmD,EH2EiC,uCAAc,WAAOA,GAAP,SAAAG,EAAA,0FAAd,2DGvEhCJ,GAAwB,IAAhBA,EAAKlD,OAChB,OACE,yBAAK4C,UAAYL,IAAOmD,aAK5B,IAAMI,EACC,GADDA,EAGE,GAIFC,EAAOJ,EAAQG,EAHZ,GAIHE,EAAOJ,EAASE,EANZ,GAQJG,EAASC,YAAU,CACvBtG,MAAO,CAAC,EAAGmG,GACXI,OAAQjD,EAAKrD,IAAI0F,GACjBa,aAAc,GACdC,aAAc,IAEVC,EAASC,YAAY,CACzB3G,MAAO,CAACoG,EAAM,GACdG,OAAQ,CACNjD,EAAKrD,IAAI4F,IAAGZ,OAAO/B,IAAK,GACxBI,EAAKrD,IAAI4F,IAAGZ,OAAOhC,IAAK,IAE1B2D,MAAM,IAGFC,EAAS3B,YAAKS,EAAGU,GACjBS,EAAS5B,YAAKW,GAAGa,GAEjBK,EACJzD,EAAKrD,KAAI,SAAC2F,EAAG1F,GACX,OACE,kBAAC8G,EAAA,EAAD,CACEtB,IAAG,cAAWC,EAAEC,IAChBqB,GAAKJ,EAAOjB,GACZsB,GAAKJ,EAAOlB,GACZuB,EAAE,KACFC,KAAK,WAKb,OACE,yBAAKpE,UAAYL,IAAOmD,YACtB,yBAAKC,MAAQA,EAAQC,OAASA,GAC5B,kBAACqB,EAAA,EAAD,CAAOC,IAAMpB,EAAaqB,KAAOrB,GAC/B,kBAACsB,EAAA,EAAD,CACEC,MAAQpB,EACRN,MAAQI,EACRH,OAASI,EACTsB,OAAO,WAET,kBAACC,EAAA,EAAD,CACEF,MAAQf,EACRX,MAAQI,EACRH,OAASI,EACTsB,OAAO,WAET,kBAACE,EAAA,EAAD,CACEtE,KAAOA,EACPqC,EAAIT,YAAKS,EAAGU,GACZR,EAAIX,YAAKW,GAAGa,GACZgB,OAAO,MACPG,YAAc,IACdC,eAAe,uBAEjB,kBAACT,EAAA,EAAD,KACIN,GAEJ,kBAACgB,EAAA,EAAD,CACEN,MAAQf,EACRsB,WAAa,SAACC,GAAD,gBAAWA,EAAEC,WAAb,WAEf,kBAACC,EAAA,EAAD,CACEV,MAAQpB,EACRiB,IAAMlB,EACN4B,WAAa,SAACC,GAAD,gBAAWA,EAAEC,WAAb,a,OCnFVE,OApBf,YAA6C,IACrCnG,ELiBkB,SAACyC,GACzB,IAAM2D,EAASC,SAAS5D,GACxB,OAAQ6D,MAAMF,IAAWA,GAAU,GAAKA,EAAStI,EAASK,OACtDiI,EACAG,IKrBaC,CADyB,EAA7BC,MAASC,OAAUjE,KAGhC,OACE,yBAAK1B,UAAU,OACb,kBAACK,EAAD,CAAiBZ,gBAAkBR,IAEhCsG,MAAMtG,GAML,GALA,kBAAC6D,GAAD,CACEC,MAAQ,IACRC,OAAS,IACT/D,SAAWA,MCRR2G,GANDC,YAAe,CAC3BC,QAAS,CACPxG,QAASyG,KCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCNNU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUV,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWpB,QAItCqB,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEpInBC,EAAOC,QAAU,CAAC,YAAc,iCAAiC,SAAW,gC,mBCA5ED,EAAOC,QAAU,CAAC,WAAa,iC","file":"static/js/main.6ce3aaba.chunk.js","sourcesContent":["import { range, mathMod } from 'ramda';\n\nconst weekDays = [\n  'Domingo',\n  'Lunes',\n  'Martes',\n  'Miércoles',\n  'Jueves',\n  'Viernes',\n  'Sábado',\n];\n\nconst today = (new Date()).getDay();\n\nexport const dayNames =\n  range(0, 5)\n  .map((i) => {\n    const index = (today + i) % weekDays.length;\n    const dayName = weekDays[index];\n    return i === 0\n      ? dayName + ' (hoy)'\n      : dayName;\n  });\n\nexport const dayToIndex = (day) => {\n  const parsed = parseInt(day);\n  return !isNaN(parsed) && parsed >= 0 && parsed < dayNames.length\n    ? parsed\n    : NaN;\n};\n\nexport const weekDayToIndex = (weekDay) => mathMod(weekDay - today, weekDays.length);\n","import { createSlice } from '@reduxjs/toolkit';\nimport { repeat, range, prop, max, min, countBy, identity, nth, toPairs, reduce, map, pipe } from 'ramda';\nimport { dayNames, weekDayToIndex } from '../../days';\n// import testData from './test-data';\n\nconst weatherEmojiMap = {\n  Clear: '☀️',\n  Clouds: '☁️',\n  Rain: '☔️',\n  Drizzle: '☔️',\n  Snow: '❄️',\n  Thunderstorm: '⚡️',\n  Mist: '🌫',\n  Smoke: '🌫',\n  Haze: '🌫',\n  Dust: '🌫',\n  Fog: '🌫',\n  Sand: '🌫',\n  Ash: '🌫',\n  Squall: '🌫',\n  Tornado: '🌫',\n}\n\nexport const weatherSlice = createSlice({\n  name: 'weather',\n  initialState: {\n    daysOverview: Array(dayNames.length),\n    daysTemperatures: repeat([], dayNames.length),\n  },\n  reducers: {\n    setOverviewWeather: (state, { payload: { dayIndex, value } }) => {\n      if (dayIndex >= 0 && dayIndex < state.daysOverview.length) {\n        state.daysOverview[dayIndex] = value;\n      }\n    },\n    setDayTemperatures: (state, { payload: { dayIndex, value } }) => {\n      if (dayIndex >= 0 && dayIndex < state.daysTemperatures.length) {\n        state.daysTemperatures[dayIndex] = value;\n      }\n    },\n  },\n});\n\nexport const { setOverviewWeather, setDayTemperatures } = weatherSlice.actions;\n\nexport const retrieveOverviewWeather = () => async (dispatch) => {\n  const response = await fetch(`//api.openweathermap.org/data/2.5/forecast?&q=Region Metropolitana,cl&units=metric&appid=${ process.env.REACT_APP_OPENWEATHERMAP_API_KEY }`);\n\n  if (response.ok) {\n    const raw = await response.json();\n\n    const temperatures =\n      raw.list\n      .map(({ dt, main: { temp }, weather: [{ main }] }) => {\n        const date = new Date(dt * 1000);\n        return {\n          hour: date.getHours(),\n          day: weekDayToIndex(date.getDay()),\n          temperature: temp,\n          weather: weatherEmojiMap[main],\n        };\n      });\n\n    const temperaturesByDay =\n      range(0, dayNames.length)\n      .map(dayIndex => temperatures.filter(({ day }) => day === dayIndex));\n\n    const weatherByDay =\n      temperaturesByDay.map((day) => {\n        const dayTemperatures = day.map(prop('temperature'));\n        const maxT = dayTemperatures.reduce(max);\n        const minT = dayTemperatures.reduce(min);\n        const weather =\n          pipe(\n            map(prop('weather')),\n            countBy(identity),\n            toPairs,\n            reduce((best, cur) => cur[1] > best[1] ? cur : best, ['', 0]),\n            nth(0)\n          )(day);\n\n        return {\n          max: maxT,\n          min: minT,\n          weather,\n        };\n      });\n    \n    weatherByDay.forEach((value, dayIndex) => {\n      dispatch(setOverviewWeather({ dayIndex, value }));\n    });\n\n    temperaturesByDay.forEach((temperatures, dayIndex) => {\n      dispatch(setDayTemperatures({ dayIndex, value: temperatures }));\n    });\n  }\n};\n\nexport const retrieveDayTemperatures = (dayIndex) => async (dispatch) => { }\n\nexport const selectDayOverviewWeather = (dayIndex) => (state) => state.weather.daysOverview[dayIndex];\n\nexport const selectDayTemperatures = (dayIndex) => (state) => state.weather.daysTemperatures[dayIndex];\n\nexport default weatherSlice.reducer;\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDayOverviewWeather } from './weatherSlice';\r\nimport styles from './DayOverview.module.css';\r\n\r\nexport function DayOverview({ children, dayIndex, currentDayIndex }) {\r\n  const classNames = styles.DayOverview + ' ' + (dayIndex === currentDayIndex ? styles.selected : '')\r\n\r\n  const weatherOverview = useSelector(selectDayOverviewWeather(dayIndex));\r\n\r\n  if (!weatherOverview) {\r\n    return (\r\n      <Link to={ `/${ dayIndex }` } className={ classNames }>\r\n          { children } ⚪️\r\n      </Link>\r\n    );\r\n  }\r\n\r\n  const { max, min, weather } = weatherOverview;\r\n  return (\r\n    <Link to={ `/${ dayIndex }` } className={ classNames }>\r\n        { children } { weather }<br />\r\n        { Math.round(min) }° / { Math.round(max) }°\r\n    </Link>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DayOverview } from './DayOverview';\nimport { selectDayOverviewWeather, retrieveOverviewWeather } from './weatherSlice';\nimport { dayNames } from '../../days';\n\n\nexport function WeatherOverview({ currentDayIndex }) {\n  const data = useSelector(selectDayOverviewWeather(0));\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!data) {\n      dispatch(retrieveOverviewWeather());\n    }\n  });\n\n  return (\n    <div className=\"days\">\n      { dayNames.map((dayName, dayIndex) =>\n        <DayOverview key={ dayIndex } dayIndex={ dayIndex } currentDayIndex={ currentDayIndex }>\n        { dayName }\n        </DayOverview>\n      ) }\n    </div>\n  );      \n}\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Group } from '@vx/group';\r\nimport { LinePath, Circle } from '@vx/shape';\r\nimport { scaleLinear, scaleBand } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { GridRows, GridColumns } from '@vx/grid';\r\nimport { pipe, min, max } from 'ramda';\r\nimport { retrieveDayTemperatures, selectDayTemperatures } from './weatherSlice';\r\nimport styles from './DayDetails.module.css';\r\n\r\n\r\n\r\nconst x = (d) => d.hour;\r\nconst y = (d) => d.temperature;\r\n\r\n\r\nexport function DayDetails({ width, height, dayIndex }) {\r\n  const data = useSelector(selectDayTemperatures(dayIndex));\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (!data || data.length === 0) {\r\n      dispatch(retrieveDayTemperatures(dayIndex));\r\n    }\r\n  });\r\n\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div className={ styles.DayDetails }>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  const margin = {\r\n    top: 30,\r\n    bottom: 30,\r\n    left: 30,\r\n    right: 30,\r\n  };\r\n  \r\n  const xMax = width - margin.left - margin.right;\r\n  const yMax = height - margin.top - margin.bottom;\r\n  \r\n  const xScale = scaleBand({\r\n    range: [0, xMax],\r\n    domain: data.map(x),\r\n    paddingOuter: 0.5,\r\n    paddingInner: 1,\r\n  });\r\n  const yScale = scaleLinear({\r\n    range: [yMax, 0],\r\n    domain: [\r\n      data.map(y).reduce(min, 0),\r\n      data.map(y).reduce(max, 0),\r\n    ],\r\n    nice: true,\r\n  });\r\n  \r\n  const xPoint = pipe(x, xScale);\r\n  const yPoint = pipe(y, yScale);\r\n  \r\n  const dots =\r\n    data.map((d, i) => {\r\n      return (\r\n        <Circle\r\n          key={ `dot-${ x(d) }` }\r\n          cx={ xPoint(d) }\r\n          cy={ yPoint(d) }\r\n          r=\"10\"\r\n          fill=\"red\"\r\n        />\r\n      )\r\n    });\r\n\r\n  return (\r\n    <div className={ styles.DayDetails }>\r\n      <svg width={ width } height={ height }>\r\n        <Group top={ margin.top } left={ margin.left }>\r\n          <GridColumns\r\n            scale={ xScale }\r\n            width={ xMax }\r\n            height={ yMax }\r\n            stroke=\"silver\"\r\n          />\r\n          <GridRows\r\n            scale={ yScale }\r\n            width={ xMax }\r\n            height={ yMax }\r\n            stroke=\"silver\"\r\n          />\r\n          <LinePath\r\n            data={ data }\r\n            x={ pipe(x, xScale) }\r\n            y={ pipe(y, yScale) }\r\n            stroke=\"red\"\r\n            strokeWidth={ 1.5 }\r\n            shapeRendering=\"geometricPrecision\"\r\n          />\r\n          <Group>\r\n            { dots }\r\n          </Group>\r\n          <AxisLeft\r\n            scale={ yScale }\r\n            tickFormat={ (v) => `${ v.toString() }°` }\r\n          />\r\n          <AxisBottom\r\n            scale={ xScale }\r\n            top={ yMax }\r\n            tickFormat={ (v) => `${ v.toString() }:00` }\r\n          />\r\n        </Group>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport { WeatherOverview } from './features/weather/WeatherOverview';\r\nimport { DayDetails } from './features/weather/DayDetails';\r\nimport { dayToIndex } from './days';\r\nimport './App.css';\r\n\r\nfunction App({ match: { params: { day } }}) {\r\n  const dayIndex = dayToIndex(day);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <WeatherOverview currentDayIndex={ dayIndex } />\r\n\r\n      { !isNaN(dayIndex)\r\n        ? <DayDetails\r\n            width={ 500 }\r\n            height={ 500 }\r\n            dayIndex={ dayIndex }\r\n          />\r\n        : ''\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport weatherReducer from '../features/weather/weatherSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    weather: weatherReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Route path=\"/:day?\" component={App} />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DayOverview\":\"DayOverview_DayOverview__1SK8v\",\"selected\":\"DayOverview_selected__1F-oS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DayDetails\":\"DayDetails_DayDetails__ESPzZ\"};"],"sourceRoot":""}