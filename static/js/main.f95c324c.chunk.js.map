{"version":3,"sources":["features/weather/days.js","features/weather/weatherSlice.js","features/weather/DayOverview.js","features/weather/WeatherOverview.js","features/weather/DayDetails.js","App.js","app/store.js","serviceWorker.js","index.js","features/weather/DayOverview.module.css"],"names":["weekDays","toSlug","string","slugify","lower","datesEqual","timeA","timeB","Date","toDateString","dayName","time","getDay","weatherEmojiMap","Clear","Clouds","Rain","Drizzle","Snow","Thunderstorm","Mist","Smoke","Haze","Dust","Fog","Sand","Ash","Squall","Tornado","tdy","initialOverview","range","map","index","day","getTime","setDate","getDate","max","NaN","min","weather","undefined","weatherSlice","createSlice","name","initialState","overview","temperatures","reducers","setOverview","state","payload","setDayTemperatures","value","actions","selectDayOverview","find","DayOverview","children","currentDay","isActive","weatherOverview","useSelector","Card","tag","NavLink","to","className","styles","color","inverse","CardBody","CardTitle","CardText","Math","round","WeatherOverview","days","data","dispatch","useDispatch","useEffect","getState","a","fetch","process","response","ok","json","raw","list","dt","temp","main","temperature","temperaturesByDay","groupBy","weatherByDay","mapObjIndexed","dayTemperatures","prop","maxT","reduce","minT","pipe","countBy","identity","toPairs","best","cur","nth","Object","values","keys","forEach","date","temps","dayTime","key","x","d","getHours","y","DayDetails","width","height","length","margin","xMax","yMax","xScale","scaleBand","domain","paddingOuter","paddingInner","yScale","scaleLinear","nice","xPoint","yPoint","dots","i","Circle","cx","cy","r","fill","viewBox","Group","top","left","GridColumns","scale","stroke","GridRows","LinePath","strokeWidth","shapeRendering","AxisLeft","tickFormat","v","toString","AxisBottom","App","slug","weekDay","findIndex","slugToTime","match","params","Container","Row","Col","sm","Button","store","configureStore","reducer","weatherReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","basename","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f95c324c.chunk.js","sourcesContent":["import slugify from 'slugify';\n\nconst weekDays = [\n  'Domingo',\n  'Lunes',\n  'Martes',\n  'Miércoles',\n  'Jueves',\n  'Viernes',\n  'Sábado',\n];\n\nconst toSlug = (string) => slugify(string, { lower: true });\n\nexport const slugToTime = (slug) => {\n  const weekDay = weekDays.findIndex((dayName) => toSlug(dayName) === slug);\n  if (weekDay === -1) {\n    return undefined;\n  }\n  const day = new Date();\n  while (day.getDay() !== weekDay) {\n    day.setDate(day.getDate() + 1);\n  }\n  return day.getTime();\n};\n\nexport const timeToSlug = (time) => time ? toSlug(dayName(time)) : '';\n\nexport const datesEqual = (timeA, timeB) => timeA && timeB && (new Date(timeA)).toDateString() === (new Date(timeB)).toDateString();\n\nexport const dayName = (time) =>\n  weekDays[(new Date(time)).getDay()];\n","import { createSlice } from '@reduxjs/toolkit';\nimport { range, prop, max, min, countBy, identity, nth, toPairs, reduce, map, pipe, groupBy, mapObjIndexed } from 'ramda';\nimport { datesEqual } from './days';\n// import testData from './test-data';\n\nconst weatherEmojiMap = {\n  Clear: '☀️',\n  Clouds: '☁️',\n  Rain: '☔️',\n  Drizzle: '☔️',\n  Snow: '❄️',\n  Thunderstorm: '⚡️',\n  Mist: '🌫',\n  Smoke: '🌫',\n  Haze: '🌫',\n  Dust: '🌫',\n  Fog: '🌫',\n  Sand: '🌫',\n  Ash: '🌫',\n  Squall: '🌫',\n  Tornado: '🌫',\n}\n\nconst tdy = new Date();\nconst initialOverview =\n  range(0, 5)\n  .map((index) => {\n    const day = new Date(tdy.getTime())\n    day.setDate(day.getDate() + index);\n    return {\n      day: day.getTime(),\n      max: NaN,\n      min: NaN,\n      weather: undefined,\n    };\n  });\n\nexport const weatherSlice = createSlice({\n  name: 'weather',\n  initialState: {\n    overview: initialOverview,\n    temperatures: {},\n  },\n  reducers: {\n    setOverview: (state, { payload }) => {\n      state.overview = payload;\n    },\n    setDayTemperatures: (state, { payload: { day, value } }) => {\n      state.temperatures[(new Date(day)).toDateString()] = value;\n    },\n  },\n});\n\nexport const { setOverview, setDayTemperatures } = weatherSlice.actions;\n\n// Selectors\n\nexport const selectDays = () => (state) => state.weather.overview.map(({ day }) => day);\n\nexport const selectDayOverview =\n  (time) =>\n    (state) =>\n      time\n        ? state.weather.overview.find(\n            ({ day }) => datesEqual(day, time)\n          )\n        : undefined;\n\nexport const selectDayTemperatures =\n  (time) =>\n    (state) =>\n      time\n        ? state.weather.temperatures[(new Date(time)).toDateString()]\n        : undefined;\n\n// Retrievers\n\nexport const retrieveOverview = () => async (dispatch, getState) => {\n  const response = await fetch(`//api.openweathermap.org/data/2.5/forecast?&q=Region Metropolitana,cl&units=metric&appid=${ process.env.REACT_APP_OPENWEATHERMAP_API_KEY }`);\n  // const response = { ok: true, json: async () => testData };\n\n  if (response.ok) {\n    const raw = await response.json();\n\n    const temperatures =\n      raw.list\n      .map(({ dt, main: { temp }, weather: [{ main }] }) => {\n        return {\n          time: dt * 1000,\n          temperature: temp,\n          weather: weatherEmojiMap[main],\n        };\n      });\n\n    const temperaturesByDay =\n      groupBy(({ time }) => (new Date(time)).toDateString(), temperatures);\n\n    const weatherByDay =\n      mapObjIndexed((day) => {\n        const dayTemperatures = day.map(prop('temperature'));\n        const maxT = dayTemperatures.reduce(max);\n        const minT = dayTemperatures.reduce(min);\n        const weather =\n          pipe(\n            map(prop('weather')),\n            countBy(identity),\n            toPairs,\n            reduce((best, cur) => cur[1] > best[1] ? cur : best, ['', 0]),\n            nth(0)\n          )(day);\n\n        return {\n          day: day[0].time,\n          max: maxT,\n          min: minT,\n          weather,\n        };\n      }, temperaturesByDay);\n\n    dispatch(setOverview(Object.values(weatherByDay)));\n\n    Object.keys(temperaturesByDay)\n    .forEach((date) => {\n      const temps = temperaturesByDay[date];\n      dispatch(setDayTemperatures({ day: temps[0].time, value: temps }))\n    });\n  }\n};\n\nexport const retrieveDayTemperatures = (day) => async (dispatch) => { }\n\n\nexport default weatherSlice.reducer;\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Card, CardBody, CardTitle, CardText } from 'reactstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDayOverview } from './weatherSlice';\r\nimport { timeToSlug, datesEqual } from './days';\r\nimport styles from './DayOverview.module.css';\r\n\r\nexport function DayOverview({ children, day, currentDay }) {\r\n  const isActive = datesEqual(day, currentDay);\r\n\r\n  const weatherOverview = useSelector(selectDayOverview(day));\r\n  const { max, min, weather } = weatherOverview\r\n    ? weatherOverview\r\n    : { max: null, min: null, weather: null };\r\n\r\n  return (\r\n    <Card\r\n      tag={ NavLink }\r\n      to={ `/${ timeToSlug(day) }` }\r\n      className={ styles.DayOverview + ' text-center my-1' }\r\n      color={ isActive ? 'dark' : 'light' }\r\n      inverse={ isActive }\r\n    >\r\n      <CardBody>\r\n        <CardTitle tag=\"h5\">\r\n          { children }\r\n        </CardTitle>\r\n        { weather\r\n          ? <CardText>\r\n              { weather } { Math.round(min) }° ~ { Math.round(max) }°\r\n            </CardText>\r\n          : <CardText>⏳</CardText>\r\n        }\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DayOverview } from './DayOverview';\nimport { selectDayOverview, selectDays, retrieveOverview } from './weatherSlice';\nimport { dayName } from './days';\n\n\nexport function WeatherOverview({ currentDay }) {\n  const days = useSelector(selectDays());\n  const data = useSelector(selectDayOverview(days[0]));\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!data || !data.weather) {\n      dispatch(retrieveOverview());\n    }\n  });\n\n  return (\n    <div>\n      { days.map((dayTime) =>\n        <DayOverview\n          key={ (new Date(dayTime)).toDateString() }\n          day={ dayTime }\n          currentDay={ currentDay }\n        >\n          { dayName(dayTime) }\n        </DayOverview>\n      ) }\n    </div>\n  );      \n}\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Group } from '@vx/group';\r\nimport { LinePath, Circle } from '@vx/shape';\r\nimport { scaleLinear, scaleBand } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { GridRows, GridColumns } from '@vx/grid';\r\nimport { pipe, min, max } from 'ramda';\r\nimport { retrieveDayTemperatures, selectDayTemperatures } from './weatherSlice';\r\n\r\n\r\n\r\nconst x = (d) => (new Date(d.time)).getHours();\r\nconst y = (d) => d.temperature;\r\n\r\n\r\nexport function DayDetails({ width, height, day }) {\r\n  const data = useSelector(selectDayTemperatures(day));\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (day && (!data || data.length === 0)) {\r\n      dispatch(retrieveDayTemperatures(day));\r\n    }\r\n  });\r\n\r\n  if (!data || data.length === 0) {\r\n    return <div></div>;\r\n  }\r\n\r\n  const margin = {\r\n    top: 6,\r\n    bottom: 30,\r\n    left: 30,\r\n    right: 0,\r\n  };\r\n  \r\n  const xMax = width - margin.left - margin.right;\r\n  const yMax = height - margin.top - margin.bottom;\r\n  \r\n  const xScale = scaleBand({\r\n    range: [0, xMax],\r\n    domain: data.map(x),\r\n    paddingOuter: 0.5,\r\n    paddingInner: 1,\r\n  });\r\n  const yScale = scaleLinear({\r\n    range: [yMax, 0],\r\n    domain: [\r\n      data.map(y).reduce(min, 10),\r\n      data.map(y).reduce(max, 25),\r\n    ],\r\n    nice: true,\r\n  });\r\n  \r\n  const xPoint = pipe(x, xScale);\r\n  const yPoint = pipe(y, yScale);\r\n  \r\n  const dots =\r\n    data.map((d, i) => {\r\n      return (\r\n        <Circle\r\n          key={ `dot-${ x(d) }` }\r\n          cx={ xPoint(d) }\r\n          cy={ yPoint(d) }\r\n          r=\"10\"\r\n          fill=\"red\"\r\n        />\r\n      )\r\n    });\r\n\r\n  return (\r\n    <svg\r\n      viewBox={ `0 0 ${ width } ${ height }` }\r\n      className=\"img-fluid mx-auto\"\r\n    >\r\n      <Group top={ margin.top } left={ margin.left }>\r\n        <GridColumns\r\n          scale={ xScale }\r\n          width={ xMax }\r\n          height={ yMax }\r\n          stroke=\"silver\"\r\n        />\r\n        <GridRows\r\n          scale={ yScale }\r\n          width={ xMax }\r\n          height={ yMax }\r\n          stroke=\"silver\"\r\n        />\r\n        <LinePath\r\n          data={ data }\r\n          x={ pipe(x, xScale) }\r\n          y={ pipe(y, yScale) }\r\n          stroke=\"red\"\r\n          strokeWidth={ 1.5 }\r\n          shapeRendering=\"geometricPrecision\"\r\n        />\r\n        <Group>\r\n          { dots }\r\n        </Group>\r\n        <AxisLeft\r\n          scale={ yScale }\r\n          tickFormat={ (v) => `${ v.toString() }°` }\r\n        />\r\n        <AxisBottom\r\n          scale={ xScale }\r\n          top={ yMax }\r\n          tickFormat={ (v) => `${ v.toString() }:00` }\r\n        />\r\n      </Group>\r\n    </svg>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Container, Row, Col, Button } from 'reactstrap';\r\nimport { WeatherOverview } from './features/weather/WeatherOverview';\r\nimport { DayDetails } from './features/weather/DayDetails';\r\nimport { slugToTime } from './features/weather/days';\r\n\r\nfunction App({ match: { params: { day } }}) {\r\n  const dayTime = slugToTime(day);\r\n\r\n  return (\r\n    <Container className=\"p-4\">\r\n      <Row>\r\n        <Col sm=\"4\" className=\"mb-4\">\r\n          <WeatherOverview currentDay={ dayTime } />\r\n        </Col>\r\n        <Col sm=\"8\" className=\"text-center my-auto\">\r\n          { dayTime\r\n            ? <div>\r\n                <DayDetails\r\n                  width={ 500 }\r\n                  height={ 500 }\r\n                  day={ dayTime }\r\n                />\r\n                <Button\r\n                  tag={ NavLink }\r\n                  to=\"/\"\r\n                  className=\"mt-4\"\r\n                >\r\n                  Cerrar\r\n                </Button>\r\n              </div>\r\n            : <p>\r\n                Selecciona un día para ver detalles.\r\n              </p>\r\n          }\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport weatherReducer from '../features/weather/weatherSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    weather: weatherReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router basename=\"/web-app-exercise/\">\r\n        <Route path=\"/:day?\" component={App} />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DayOverview\":\"DayOverview_DayOverview__1SK8v\"};"],"sourceRoot":""}